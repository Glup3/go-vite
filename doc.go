/*
Package vite implements a Vite backend integration for Go as described
in https://vitejs.dev/guide/backend-integration.html.

The integration is done by a HTTP handler that implements http.Handler.
The handler has two modes: Development and production.

In development mode, you need to create the handler by passing a file system
that points to a source of your Vite app as the first parameter. The second
parameter needs to be true to put the handler into development mode. And the
third and last parameter points to the Vite server running in the background,
typically http://localhost:5173 (the endpoint served by running "npm run dev").
Again: You need to run the Vite server in the background in development mode,
so open up a 2nd console and run something like "npm run dev".

Example:

	// Serve in development mode (assuming your frontend code is in ./frontend,
	// relative to your binary)
	v, err := vite.NewHandler(os.DirFS("./frontend"), true, "http://localhost:5173")
	if err != nil { ... }

	//

In production mode, you typically embed the whole generated dist directory
generated by "vite build" into the Go binary, using go:embed. In that case,
your first parameter needs to be the embedded "dist" file system. The second
parameter must be false to enable production mode. The last parameter can be
blank, as it is not used in production mode.

Example:

	//go:embed all:dist
	var distFS embed.FS

	func DistFS() fs.FS {
		efs, err := fs.Sub(distFS, "dist")
		if err != nil {
			panic(fmt.Sprintf("unable to serve frontend: %v", err))
		}
		return efs
	}

	// Serve in production mode
	v, err := vite.NewHandler(DistFS(), false, "")
	if err != nil { ... }
*/
package vite
